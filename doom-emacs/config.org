* Table of Contents :TOC@2@gh:
- [[#general][General]]
- [[#packages][Packages]]
  - [[#cdlatex][CDLaTeX]]
  - [[#css][CSS]]
  - [[#fcitx][Fcitx]]
  - [[#modeline][Modeline]]
  - [[#org][Org]]
- [[#keybindings][Keybindings]]
  - [[#org-1][Org]]

* General

#+BEGIN_SRC emacs-lisp :results silent output
(setq-default
 doom-font                    (font-spec :family "Sarasa Mono CL" :size 20)
 doom-big-font                (font-spec :family "Sarasa Mono CL" :size 19)
 browse-url-browser-function  'browse-url-default-browser
 confirm-kill-emacs           'y-or-n-p
 doom-localleader-key         "m"
 evil-escape-key-sequence     "jk"
 user-full-name               "PoiScript"
 user-mail-address            "poiscript@gmail.com")
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent output
(defun window-system-setup (&optional frame)
  (with-selected-frame (or frame (selected-frame))
    (when window-system
      (set-fontset-font t 'kana      (font-spec :family "Sarasa Mono J"  :size 20))
      (set-fontset-font t 'cjk-misc  (font-spec :family "Sarasa Mono SC" :size 20))
      (set-fontset-font t 'han       (font-spec :family "Sarasa Mono SC" :size 20)))))

(add-hook! 'after-make-frame-functions 'window-system-setup)

(window-system-setup)
#+END_SRC

* Packages

** CDLaTeX

#+BEGIN_SRC emacs-lisp :results silent output
(use-package! cdlatex
  :after (:any org-mode LaTeX-mode)
  :hook
  ((LaTeX-mode . turn-on-cdlatex)
   (org-mode . turn-on-org-cdlatex))
  :config
  (setq
   cdlatex-command-alist
   '(("lim"        "Insert \\lim_{}\\limits_{}"
      "\\lim\\limits_{?}"  cdlatex-position-cursor nil nil t)
     ("sin"        "Insert \\sin"
      "\\sin"              nil                     nil t   t)
     ("cos"        "Insert \\cos"
      "\\cos"              nil                     nil t   t)
     ("under"      "Insert \\underset{}{}"
      "\\underset{?}{}"    cdlatex-position-cursor nil nil t)
     ("prod"       "Insert \\prod\\limits_{}"
      "\\prod\\limits_{?}" cdlatex-position-cursor nil nil t)
     ("txt"        "Insert \\text{}"
      "\\text{?}"          cdlatex-position-cursor nil nil t)
     ("iintl"      "Insert \\iint\\limits_{}"
      "\\iint\\limits_{?}" cdlatex-position-cursor nil nil t))
   cdlatex-env-alist
   '(("cases"   "\\begin{cases}\n?\n\\end{cases}\n"     nil)
     ("aligned" "\\begin{aligned}\n?\n\\end{aligned}\n" nil))))
#+END_SRC

** CSS

#+BEGIN_SRC emacs-lisp :results silent output
(after! css-mode
  :config
  (setq css-fontify-colors nil))
#+END_SRC

** Fcitx

#+BEGIN_SRC emacs-lisp :results silent output
(use-package! fcitx
  :config
  (setq
   fcitx-active-evil-states  '(insert emacs)
   fcitx-remote-command      "fcitx5-remote"
   fcitx-use-dbus            nil)
  (fcitx-aggressive-setup))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp :results silent output
(after! doom-modeline
  :config
  (setq
   doom-modeline-buffer-file-name-style    'truncate-with-project
   doom-modeline-buffer-modification-icon  nil
   doom-modeline-env-version               nil)
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position selection-info)
    '(objed-state misc-info persp-name buffer-encoding lsp major-mode process vcs checker)))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp :results silent output
(after! org
  :config
  (setq
   org-bullets-bullet-list '("◉" "○")
   org-agenda-files  '("~/org/calendar.org")
   org-todo-keyword-faces
   '(("CANC" . "indian red")
     ("EVNT" . "orchid")
     ("MIGR" . "rosy brown")
     ("TODO" . "#98be65"))
   org-highlight-latex-and-related  '(latex)
   org-capture-templates
   '(("t" "Personal todo" entry
      (file+headline "~/org/todo.org"  "Inbox")
      "\n* TODO %?\n:PROPERTIES:\nCREATED: %T\n:END:\n\n%i\n\n"
      :prepend t :kill-buffer t :empty-lines 1)
     ("n" "Personal notes" entry
      (file+headline "~/org/notes.org" "Inbox")
      "\n* %u %?\n%i\n%a\n\n"
      :prepend t :kill-buffer t :empty-lines 1))
   org-format-latex-options (plist-put org-format-latex-options :scale 2)
   org-latex-create-formula-image-program 'dvisvgm
   org-latex-packages-alist '(("" "minted"))
   org-latex-default-packages-alist
   '(("AUTO"      "inputenc"  t ("pdflatex"))
     ("T1"        "fontenc"   t ("pdflatex"))
     (""          "amsmath"   t)
     (""          "esint"     t) ;; fancy integral symbols
     (""          "amssymb"   t)
     (""          "capt-of"   nil)
     (""          "graphicx"  t)
     (""          "grffile"   t)
     (""          "longtable" nil)
     (""          "rotating"  nil)
     (""          "textcomp"  t)
     (""          "wrapfig"   nil)
     ("normalem"  "ulem"      t)
     ("hidelinks" "hyperref"  nil))
   org-latex-listings 'minted
   org-latex-pdf-process
   '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (advice-add
   'org-todo :after
   (lambda (&optional arg)
     (if (string= (org-get-todo-state) "DONE")
         (org-add-planning-info 'closed (org-current-effective-time))
       (org-add-planning-info nil nil 'closed)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent output
(use-package! org-drill
  :config
  (add-to-list 'org-modules 'org-drill)
  (setq org-drill-left-cloze-delimiter "<["
        org-drill-right-cloze-delimiter "]>"))
#+END_SRC

* Keybindings

#+BEGIN_SRC emacs-lisp :results silent output
(map!
 ;; window navigation
 "M-h"      #'evil-window-left
 "M-j"      #'evil-window-down
 "M-k"      #'evil-window-up
 "M-l"      #'evil-window-right
 "M-s"      #'save-buffer
 [mouse-6]  #'scroll-right
 [mouse-7]  #'scroll-left
 [mouse-8]  #'next-buffer
 [mouse-9]  #'previous-buffer

 :nv "C-S-j" #'drag-stuff-down
 :nv "C-S-k" #'drag-stuff-up
 :nv "C-S-h" #'drag-stuff-left
 :nv "C-S-l" #'drag-stuff-right

 :nv "C-M-j" #'evil-mc-make-cursor-move-next-line
 :nv "C-M-k" #'evil-mc-make-cursor-move-prev-line

 ;; emacs motion
 :nvi "C-e"   #'end-of-line
 :nvi "C-a"   #'beginning-of-line
 :nvi "C-n"   #'next-line
 :nvi "C-p"   #'previous-line

 :leader
 (:prefix-map ("o" . "open")
   "c" (λ! (find-file "~/org/calendar.org"))
   "n" (λ! (find-file +org-capture-notes-file))
   "t" (λ! (find-file +org-capture-todo-file)))

 (:prefix-map ("b" . "buffer")
   "w" #'doom/sudo-this-file
   "s" #'doom/switch-to-scratch-buffer)

 (:prefix-map ("t" . "toggle")
   "m" #'toggle-frame-maximized))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent output
(map!
 :prefix "gl"
 :v "f" #'flush-lines
 :v "k" #'keep-lines
 :v "s" #'sort-lines
 :v "u" #'delete-duplicate-lines)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp :results silent output
(map!
 :after org
 :map evil-org-mode-map
 "M-h" #'evil-window-left
 "M-l" #'evil-window-right
 "M-j" #'evil-window-down
 "M-k" #'evil-window-up

 :localleader
 "'"   #'org-edit-special
 ","   #'org-priority
 "."   #'org-time-stamp
 "RET" #'org-ctrl-c-ret
 "S"   #'org-sort
 "d"   #'org-deadline
 "e"   #'org-export-dispatch
 "i"   #'org-toggle-inline-images
 "l"   #'org-toggle-link-display
 "m"   #'org-ctrl-c-ctrl-c
 "p"   #'org-latex-preview
 "s"   #'org-schedule
 "t"   #'org-todo

 (:prefix "n"
   "b" #'org-narrow-to-block
   "e" #'org-narrow-to-element
   "s" #'org-narrow-to-subtree)

 (:prefix "c"
   "G" (λ! (org-clock-goto 'select))
   "c" #'org-clock-cancel
   "d" #'org-clock-display
   "e" #'org-clock-out
   "g" #'org-clock-goto
   "s" #'org-clock-in))
#+END_SRC
